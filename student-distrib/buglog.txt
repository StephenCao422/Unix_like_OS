CP1 Bugs

Author: Rubin Du
Description: Stuck in a loop of the kernel boot screen
Location: boot.S
Fix: Have to first create a GDT descriptor and then load using lgdt instead of directly lgdt gdt

Author: Rubin Du
Description: Kernel killed immediately when an exception happens
Location: idt.c
Fix: Forgot to specify seg_selector as kernel code segment. Fixed by correcting it

Author: Shanbo Zhang
Description: Paging does not work correctly as desired.
Location: paging.c
Fix: To enable paging, we firstly need to set all related registers to desired value, then set bit #31 of the CR0 to 1. We also need to set the protection mode.

Author: Shanbo Zhang
Description: Page Fault was not generated as I access random, meaningless addresses.
Location: paging.c
Fix: We need to set the paging base address even though we don't need such pages, because these pages still need to map to corresponding address ranges. Also, we need to set the page_size to correct granularity (4KB or 4MB).

Author: Rubin Du
Description: RTC interrupts doesn't work
Location: i8259.c
Fix: Have to enable both the ir2 pin and the correct ir pin on the slave pic when initializing device interrupts connected to slave pics. Can be done by enable both irq initializing the device connected to the slave or enable slave pic when initializing 8259A (which I did)

Author: Rubin Du
Description: RTC change rate doesn't work as intended
Location: rtc.c
Fix: Misunderstood the meaning of frequency and rate on https://wiki.osdev.org/RTC, and used the wrong thing for inputs. Fixed by correcting it.

CP2 Bugs

Author: Rubin Du
Description: Shift release can't be received
Location: keyboard.c
Fix: Have to mask others but the last byte received from keyboard port for release signals

Author: Rubin Du
Description: Spamming left and right shifts together sometimes makes the shift stuck
Location: keyboard.c
Fix: Have to flush both shift whenever one shift is released, as release signals sometimes can't be properly recieved when other keys are holding/Spamming

Author: Rubin Du
Description: Typing when terminal isn't reading sometimes corrupts the read buffer / causes page fault
Location: terminal.c
Fix: end_of_line function should return immediately when terminal isn't read, so it won't corrupts data that it should't be accessing

Author: Rubin Du
Description: Spamming keyboard during write may bugs the string written on terminal
Location: terminal.c
Fix: terminal write has to mask interrupts when write to prevent echoed keyboard input writing to screen

Author: Shanbo Zhang
Description: The logical interrupts occurred much slower than it should be.
Location: rtc.c
Fix: I used a counter, and read checks if it is 0. From frequency to 0, there is actually (frequency + 1) decrements. As I adjust the bound from 0 to 1, it works as desired. As the logical frequency increases, it would be slower, because extra decrements become more.

Author: Stephen Cao
Description: The file size is 0 for all files.
Location: filesys.c
Fix: I only access the a fixed location in the dentry struct, which means that the retrieved file size is the first file, which is ".". To get the file size of each file, I added the offset as a parameter of the function.

CP3 Bugs

Author: Stephen Cao
Description: The system_open function return wrong fd.
Location: system_call.c
Fix: the open function do not return the fd value that cause 'ls.exe' test show open directory fail. After changing the for loop for fd counter and return the correct fd, it fixed.

Author: Shanbo Zhang
Description: The halt system call brings the eip to 0, and causes page fault.
Location: system_call.c
Fix: We need to restore the ebp as we switch back to the shell. I recorded the ebp in the pcb. Logically, it is the pcb to be switched back. I use the parent pcb's ebp, however, which causes the function return to the bad address. It runs currectly as I change the ebp.

Author: Shanbo Zhang
Description: Page fault at USER_ENTRY (32, 128MB), even after I mark the page present.
Location: system_call.c
Fix: To allow the user program to write to the page, we need to mark the bit #2 to 1, which represents if user can write the page.

Author: Shanbo Zhang
Description: page fault at halt after we reset the page base address
LOCATION: system_call.c
Fix: At this time, we also need to flush the TLB.

CP4 Bugs

Author: Rubin Du
Description: Keyboard stopped working after CTRL+C
Location: keyboard.c
Fix: Have send EOI and unmask interrupts before halting the program

Author: Rubin Du
Description: Asychronous terminal writes results in abnormal backspace behavior
Location: terminal.c
Fix: Have to reset the keyboard buffer whenever a terminal write is done so that backspace won't delete written characters